{"version":3,"sources":["angular-modal-service.min.js","angular-modal-service.js"],"names":["ModalService","$animate","$document","$compile","$controller","$rootScope","$q","$templateRequest","$timeout","validateOptions","options","controller","templateUrl","template","createModal","getTemplate","d","defer","resolve","promise","reject","compileModal","appendChild","parent","child","children","length","enter","destroyFn","result","delay","closeDeferred","leave","modalElement","then","closedDeferred","modalScope","$destroy","inputs","close","$new","$scope","angular","extend","linkFn","$element","modalController","controllerAs","appendElement","body","scope","element","destroy","closed","showBsModal","controllerName","modal","on","find","showModal","module","service","$inject"],"mappings":"AAAA;AACA,CCKC,WAEG,YAQA,SAASA,GAAaC,EAAUC,EAAWC,EAAUC,EAAaC,EAAYC,EAAIC,EAAkBC,GAQhG,QAASC,GAAgBC,GACrB,IAAKA,EAAQC,WACT,KAAM,yBAEV,KAAMD,EAAQE,cAAeF,EAAQG,SACjC,KAAM,wBAId,QAASC,GAAYJ,GAQjB,QAASK,GAAYF,EAAUD,GAC3B,GAAIC,EAAU,CACV,GAAIG,GAAIV,EAAGW,OAEX,OADAD,GAAEE,QAAQL,GACHG,EAAEG,QACN,MAAIP,GACAL,EAAiBK,GAAa,GAE9BN,EAAGc,OAAO,kDAIzB,QAASC,GAAaR,GAuDlB,QAASS,GAAYC,EAAQC,GACzB,GAAIC,GAAWF,EAAOE,UACtB,OAAIA,GAASC,OAAS,EACXzB,EAAS0B,MAAMH,EAAOD,EAAQE,EAASA,EAASC,OAAS,IAE7DzB,EAAS0B,MAAMH,EAAOD,GAGjC,QAASK,GAAUC,EAAQC,GACvB,MAAOtB,GAAS,WAKZ,MAHAuB,GAAcb,QAAQW,GAGf5B,EAAS+B,MAAMC,GACjBC,KAAK,WAEFC,EAAejB,QAAQW,GAGvBO,EAAWC,WAKXC,EAAOC,MAAQ,KACfR,EAAgB,KAChBO,EAAS,KACTL,EAAe,KACfG,EAAa,QAEtBN,GAAS,GA/EhB,GAAIC,GAAgBzB,EAAGW,QACnBkB,EAAiB7B,EAAGW,QAGpBmB,EAAa/B,EAAWmC,MAAK,GAC7BF,GACAG,OAAQL,EACRG,MAAOX,EAIPlB,GAAQ4B,QAAQI,QAAQC,OAAOL,EAAQ5B,EAAQ4B,OAInD,IAAIM,GAASzC,EAASU,GAClBoB,EAAeW,EAAOR,EAC1BE,GAAOO,SAAWZ,CAGlB,IAAIa,GAAkB1C,EAAYM,EAAQC,WAAY2B,EAgBtD,OAdI5B,GAAQqC,eACRX,EAAW1B,EAAQqC,cAAgBD,GAInCpC,EAAQsC,cAER1B,EAAYZ,EAAQsC,cAAef,GAGnCX,EAAY2B,EAAMhB,IAKlBtB,WAAYmC,EACZI,MAAOd,EACPe,QAASlB,EACTmB,QAASxB,EACTW,MAAOR,EAAcZ,QACrBkC,OAAQlB,EAAehB,SAnE/B,MADAV,GAAgBC,GACTK,EAAYL,EAAQG,SAAUH,EAAQE,aACxCsB,KAAKb,GA4Gd,QAASiC,GAAYC,EAAgB3C,EAAaM,GAC9C,MAAOJ,IACHF,YAAaA,EACbD,WAAY4C,EACZjB,OAAQpB,IACTgB,KAAK,SAAUsB,GAEdA,EAAML,QAAQK,QAEdA,EAAML,QAAQM,GAAG,kBAAmBD,EAAMJ,WAxIlD,GAAIH,GAAO/C,EAAUwD,KAAK,OAE1B,QACIC,UAAW7C,EACXwC,YAAaA,GAXrB,GAAIM,GAASlB,QAAQkB,OAAO,yBAE5BA,GACKC,QAAQ,eAAgB7D,GAE7BA,EAAa8D,SAAW,WAAY,YAAa,WAAY,cAAe,aAAc,KAAM,mBAAoB","file":"angular-modal-service.min.js","sourcesContent":["/*angular-modal-service v0.6.9 - https://github.com/dwmkerr/angular-modal-service */\n!function(){\"use strict\";function e(e,t,n,r,l,o,c,i){function u(e){if(!e.controller)throw\"No controller specified\";if(!e.templateUrl&&!e.template)throw\"No template specified\"}function a(t){function a(e,t){if(e){var n=o.defer();return n.resolve(e),n.promise}return t?c(t,!0):o.reject(\"No template or templateUrl has been specified.\")}function s(c){function u(t,n){var r=t.children();return r.length>0?e.enter(n,t,r[r.length-1]):e.enter(n,t)}function a(t,n){return i(function(){return s.resolve(t),e.leave($).then(function(){p.resolve(t),m.$destroy(),f.close=null,s=null,f=null,$=null,m=null})},n||0)}var s=o.defer(),p=o.defer(),m=l.$new(!0),f={$scope:m,close:a};t.inputs&&angular.extend(f,t.inputs);var v=n(c),$=v(m);f.$element=$;var h=r(t.controller,f);return t.controllerAs&&(m[t.controllerAs]=h),t.appendElement?u(t.appendElement,$):u(d,$),{controller:h,scope:m,element:$,destroy:a,close:s.promise,closed:p.promise}}return u(t),a(t.template,t.templateUrl).then(s)}function s(e,t,n){return a({templateUrl:t,controller:e,inputs:n}).then(function(e){e.element.modal(),e.element.on(\"hidden.bs.modal\",e.destroy)})}var d=t.find(\"body\");return{showModal:a,showBsModal:s}}var t=angular.module(\"angularModalService\",[]);t.service(\"ModalService\",e),e.$inject=[\"$animate\",\"$document\",\"$compile\",\"$controller\",\"$rootScope\",\"$q\",\"$templateRequest\",\"$timeout\"]}();\n//# sourceMappingURL=angular-modal-service.min.js.map\n","//  angularModalService.js\n//\n//  Service for showing modal dialogs.\n\n/***** JSLint Config *****/\n/*global angular  */\n(function () {\n\n    'use strict';\n\n    var module = angular.module('angularModalService', []);\n\n    module\n        .service('ModalService', ModalService);\n\n    ModalService.$inject = ['$animate', '$document', '$compile', '$controller', '$rootScope', '$q', '$templateRequest', '$timeout'];\n    function ModalService($animate, $document, $compile, $controller, $rootScope, $q, $templateRequest, $timeout) {\n        var body = $document.find('body');\n\n        return {\n            showModal: createModal,\n            showBsModal: showBsModal\n        };\n\n        function validateOptions(options) {\n            if (!options.controller) {\n                throw 'No controller specified';\n            }\n            if (!(options.templateUrl || options.template)) {\n                throw 'No template specified';\n            }\n        }\n\n        function createModal(options) {\n            validateOptions(options);\n            return getTemplate(options.template, options.templateUrl)\n                .then(compileModal);\n\n            //  Returns a promise which gets the template, either\n            //  from the template parameter or via a request to the\n            //  template url parameter.\n            function getTemplate(template, templateUrl) {\n                if (template) {\n                    var d = $q.defer();\n                    d.resolve(template);\n                    return d.promise;\n                } else if (templateUrl) {\n                    return $templateRequest(templateUrl, true);\n                } else {\n                    return $q.reject(\"No template or templateUrl has been specified.\");\n                }\n            }\n\n            function compileModal(template) {\n                //  Create the inputs object to the controller - this will include\n                //  the scope, as well as all inputs provided.\n                //  We will also create a deferred that is resolved with a provided\n                //  close function. The controller can then call 'close(result)'.\n                //  The controller can also provide a delay for closing - this is\n                //  helpful if there are closing animations which must finish first.\n                var closeDeferred = $q.defer();\n                var closedDeferred = $q.defer();\n\n                //  Create a new isolate scope for the modal.\n                var modalScope = $rootScope.$new(true);\n                var inputs = {\n                    $scope: modalScope,\n                    close: destroyFn\n                };\n\n                //  If we have provided any inputs, pass them to the controller.\n                if (options.inputs) angular.extend(inputs, options.inputs);\n\n                //  Compile then link the template element, building the actual element.\n                //  Set the $element on the inputs so that it can be injected if required.\n                var linkFn = $compile(template);\n                var modalElement = linkFn(modalScope);\n                inputs.$element = modalElement;\n\n                //  Create the controller, explicitly specifying the scope to use.\n                var modalController = $controller(options.controller, inputs);\n\n                if (options.controllerAs) {\n                    modalScope[options.controllerAs] = modalController;\n                }\n\n                //  Finally, append the modal to the dom.\n                if (options.appendElement) {\n                    // append to custom append element\n                    appendChild(options.appendElement, modalElement);\n                } else {\n                    // append to body when no custom append element is specified\n                    appendChild(body, modalElement);\n                }\n\n                //  We now have a modal object...\n                return {\n                    controller: modalController,\n                    scope: modalScope,\n                    element: modalElement,\n                    destroy: destroyFn,\n                    close: closeDeferred.promise,\n                    closed: closedDeferred.promise\n                };\n\n                //  Adds an element to the DOM as the last child of its container\n                //  like append, but uses $animate to handle animations. Returns a\n                //  promise that is resolved once all animation is complete.\n                function appendChild(parent, child) {\n                    var children = parent.children();\n                    if (children.length > 0) {\n                        return $animate.enter(child, parent, children[children.length - 1]);\n                    }\n                    return $animate.enter(child, parent);\n                }\n\n                function destroyFn(result, delay) {\n                    return $timeout(function () {\n                        //  Resolve the 'close' promise.\n                        closeDeferred.resolve(result);\n\n                        //  Let angular remove the element and wait for animations to finish.\n                        return $animate.leave(modalElement)\n                            .then(function () {\n                                //  Resolve the 'closed' promise.\n                                closedDeferred.resolve(result);\n\n                                //  We can now clean up the scope\n                                modalScope.$destroy();\n\n                                //  Unless we null out all of these objects we seem to suffer\n                                //  from memory leaks, if anyone can explain why then I'd\n                                //  be very interested to know.\n                                inputs.close = null;\n                                closeDeferred = null;\n                                inputs = null;\n                                modalElement = null;\n                                modalScope = null;\n                            });\n                    }, delay || 0);\n                }\n            }\n        }\n\n        function showBsModal(controllerName, templateUrl, resolve) {\n            return createModal({\n                templateUrl: templateUrl,\n                controller: controllerName,\n                inputs: resolve\n            }).then(function (modal) {\n                // show element as bootstrap modal\n                modal.element.modal();\n                // destroy element, scope etc. when bootstrap modal is hidden\n                modal.element.on('hidden.bs.modal', modal.destroy);\n            });\n        }\n    }\n\n}());\n"],"sourceRoot":"/source/"}